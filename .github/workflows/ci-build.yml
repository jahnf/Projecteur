name: ci-build

on: 
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    strategy:
      matrix:
        docker_tag: 
        #- archlinux
        #- fedora-30
        #- fedora-31
        #- fedora-32
        #- debian-stretch
        #- debian-buster
        - ubuntu-18.04
        - ubuntu-20.04
        #- opensuse-15.0
        #- opensuse-15.1
        #- centos-8
        os: 
        - ubuntu-latest

    runs-on: ${{ matrix.os }}
    env:
      DOCKER_IMG: jahnf/projecteur
      DOCKER_TAG: ${{ matrix.docker_tag }}
      MAKEFLAGS: -j2
      CLOUDSMITH_USER: jahnf
      CLOUDSMITH_SUMMARY: ci-build from branch '${{ github.ref }}'
      CLOUDSMITH_DESC: For more information visit https://github.com/jahnf/Projecteur

    steps:
    # ===================================================================================
    # ---------- Add ~/.local/bin to PATH ----------
    - run: |
        export LOCAL_BIN=~/.local/bin
        echo "::set-env name=PATH::${PATH}:${LOCAL_BIN}"

    # ===================================================================================
    # ---------- Checkout and build inside docker container ----------
    - uses: actions/checkout@v1
    - name: Pull ${{ matrix.docker_tag }} docker image
      run: docker pull ${DOCKER_IMG}:${{ matrix.docker_tag }}
    - name: docker create build container
      run: |
        docker run --name build --env MAKEFLAGS=${MAKEFLAGS} \
          --env TRAVIS_BRANCH=${GITHUB_REF/refs\/heads\//} \
          -d -v `pwd`:/source:ro -t ${DOCKER_IMG}:${{ matrix.docker_tag }}
    - name: cmake configuration
      run: docker exec build /bin/bash -c "mkdir -p /build/dist-pkg && cd /build && cmake /source"
    - name: cmake build
      run: docker exec build /bin/bash -c "cd /build && cmake --build ."
    - name: create linux package
      run: docker exec build /bin/bash -c "cd /build && cmake --build . --target dist-package"
    - name: Run projecteur executable, print version
      run: |
        docker exec build /bin/bash -c "cd /build && ./projecteur --version"
        docker exec build /bin/bash -c "cd /build && ./projecteur -f"

    # ===================================================================================
    # ---------- Gather artifacts and version information from container build ----------
    - name: Get created artifacts from docker container
      run: |
        docker cp build:/build/dist-pkg .
        docker cp build:/build/version-string .
    
    - name: Set version environment variable
      run: |
        projecteur_version=`cat version-string`
        echo "::set-env name=projecteur_version::${projecteur_version}"

    - name: Move source package
      if:  startsWith(matrix.docker_tag, 'archlinux')
      run: mkdir -p source-pkg && mv dist-pkg/*source.tar.gz ./source-pkg || true

    - name: Get source package filename for artifact uploads
      run: |
        src_pkg_artifact=`ls -1 source-pkg/* | head -n 1`
        echo "::set-env name=src_pkg_artifact::${src_pkg_artifact}"

    - name: Get binary package filename for artifact uploads
      run: |
        dist_pkg_artifact=`ls -1 dist-pkg/* | head -n 1`
        echo "::set-env name=dist_pkg_artifact::${dist_pkg_artifact}"
    
    # ===================================================================================
    # ---------- Upload artifacts to github ----------
    - name: Upload source-pkg artifact to github
      if:  startsWith(matrix.docker_tag, 'archlinux')
      uses: actions/upload-artifact@v1
      with:
        name: source-package
        path: ${{ env.src_pkg_artifact }}

    - name: Upload binary package artifact to github
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.docker_tag }}-package
        path: ${{ env.dist_pkg_artifact }}

    # ===================================================================================
    # ---------- Set environment variables depending on branch ----------
    - name: Set environment variable defaults
      run: |
        echo "::set-env name=upload_bin_pkg::${{ false }}"
        echo "::set-env name=upload_src_pkg::${{ false }}"
        ghref="${{ github.ref }}"
        branch_name=${ghref:11} 
        echo "::set-env name=branch_name::${branch_name}"
        echo "::set-env name=cloudsmith_upload_repo::projecteur-develop"

    - name: Check for binary-pkg upload conditions
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
      run: |
        echo "::set-env name=upload_bin_pkg::${{ true }}"
        echo "::set-env name=bintray_upload_pkg::projecteur-${{ env.branch_name }}"
        pip install --upgrade wheel 
        pip install --upgrade cloudsmith-cli

    - name: Check for source-pkg upload conditions
      if: env.upload_bin_pkg == 'true' && startsWith(matrix.docker_tag, 'archlinux')
      run: |
        echo "::set-env name=upload_src_pkg::${{ true }}"

    - if: github.ref == 'refs/heads/master'
      run: echo "::set-env name=cloudsmith_upload_repo::projecteur-stable"

    # ===================================================================================
    # ---------- Upload artifacts to cloudsmith ----------
    - name: Install...
      run: |
        pip install --upgrade wheel 
        pip install --upgrade cloudsmith-cli
    
    - name: Upload raw binary-pkg to cloudsmith
      #if:
      env:
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }} 
        CLOUDSMITH_REPO: ${{ env.cloudsmith_upload_repo }}
      run: |
        cloudsmith push raw -W -k ${CLOUDSMITH_API_KEY} --name ${{ matrix.docker_tag }} --republish \
          --version ${{ env.projecteur_version }} ${CLOUDSMITH_USER}/${CLOUDSMITH_REPO} \
          --summary "${CLOUDSMITH_SUMMARY}" --description "${CLOUDSMITH_DESC}" ${{ env.dist_pkg_artifact }}

    - name: Upload raw source-pkg to cloudsmith
      if: startsWith(matrix.docker_tag, 'archlinux')
      env:
        CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }} 
        CLOUDSMITH_REPO: ${{ env.cloudsmith_upload_repo }}
      run: |
        cloudsmith push raw -W -k ${CLOUDSMITH_API_KEY} --name sources --republish \
          --version ${{ env.projecteur_version }} ${CLOUDSMITH_USER}/${CLOUDSMITH_REPO} \
          --summary "${CLOUDSMITH_SUMMARY}" --description "${CLOUDSMITH_DESC}" ${{ env.src_pkg_artifact }}

    # ===================================================================================
    # ---------- Upload artifacts to bintray ----------
    - name: Upload source-pkg to Bintray
      if: env.upload_src_pkg == 'true'
      uses: bpicode/github-action-upload-bintray@master
      with:
        file: ${{ env.src_pkg_artifact }}
        api_user: jahnf
        api_key: ${{ secrets.BINTRAY_API_KEY }}
        repository_user: jahnf
        repository: Projecteur
        package: ${{ env.bintray_upload_pkg }}
        version: ${{ env.projecteur_version }}
        upload_path: packages/branches/${{ env.branch_name }}/${{ env.projecteur_version }}
        calculate_metadata: false
        publish: 1
  
    - name: Upload binary package to Bintray
      if: env.upload_bin_pkg == 'true'
      uses: bpicode/github-action-upload-bintray@master
      with:
        file: ${{ env.dist_pkg_artifact }}
        api_user: jahnf
        api_key: ${{ secrets.BINTRAY_API_KEY }}
        repository_user: jahnf
        repository: Projecteur
        package: ${{ env.bintray_upload_pkg }}
        version: ${{ env.projecteur_version }}
        upload_path: packages/branches/${{ env.branch_name }}/${{ env.projecteur_version }}
        calculate_metadata: false
        publish: 1
  
